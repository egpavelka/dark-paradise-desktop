;;; packages.el --- rogue Layer packages File for Spacemacs

(defconst gigi-packages
  '(calfw
    calfw-org
    doom-themes
    gscholar-bibtex
    (kindle :location local)
    mediawiki
    multiple-cursors
    neotree
    nov
    ;;org-ac
    org-cliplink
    org-dashboard
    (org-expand :location (recipe :fetcher github :repo "lepisma/org-expand"))
    org-gcal
    (org-gh :location local)
    org-journal
    (org-make :location local)
    org-noter
    (org-pretty-table :location (recipe :fetcher github :repo "Fuco1/org-pretty-table"))
    parinfer
    pretty-mode
    (rogue-ligatures :location local)
    (rogue-org :location local)
    (rogue-processes :location local)
    (rogue-ui :location local)
    (rogue-utils :location local)
    writeroom-mode))

;; Initialize packages
(defun gigi/init-all-the-icons ()
  (use-package all-the-icons))

(defun gigi/init-calfw ()
  (use-package calfw
    :bind (("C-c q" . cfw:open-org-calendar))
    :config
    (setq cfw:fchar-junction ?┼
          cfw:fchar-vertical-line ?│
          cfw:fchar-horizontal-line ?─
          cfw:fchar-left-junction ?├
          cfw:fchar-right-junction ?┤
          cfw:fchar-top-junction ?┬
          cfw:fchar-top-left-corner ?┌
          cfw:fchar-top-right-corner ?┐)
    (setq cfw:render-line-breaker 'cfw:render-line-breaker-none)
    (setq cfw:face-item-separator-color nil)))

(defun gigi/init-calfw-org ()
  (use-package calfw-org
    :after calfw
    :config
    (setq cfw:org-face-agenda-item-foreground-color "#BF616A")))

(defun gigi/init-doom-themes ()
  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)

    (doom-themes-neotree-config)
    (setq doom-neotree-enable-variable-pitch t
          doom-neotree-file-icons 'simple
          doom-neotree-line-spacing 4)
    (doom-themes-org-config)))


(defun gigi/init-gscholar-bibtex ()
  (use-package gscholar-bibtex
    :config
    (setq gscholar-bibtex-database-file user-bib-file
          gscholar-bibtex-default-source "Google Scholar")))

(defun gigi/init-kindle ()
  (use-package kindle
    :config
    (setq kindle-clipping-save-file user-clippings-file)))

(defun gigi/init-mediawiki ()
  (use-package mediawiki))

(defun gigi/init-multiple-cursors ()
  (use-package multiple-cursors
    :bind (("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           ("C-M-<mouse-1>" . mc/add-cursor-on-click))))

(defun gigi/init-nov ()
  (use-package nov
    :config
    (push '("\\.epub\\'" . nov-mode) auto-mode-alist)
    (setq nov-text-width 80)))

(defun gigi/init-neotree ()
  (use-package neotree
    :bind ("<f8>" . neotree-toggle)
    :config
    (setq neo-msart-open t
          projectile-switch-project-action 'neotree-projectile-action)))

(defun gigi/init-org-cliplink ()
  (use-package org-cliplink
    :bind (("C-c y" . org-cliplink))))

(defun gigi/init-org-expand ()
  (use-package org-expand
    :bind (("C-c x" . helm-org-expand))))

(defun gigi/init-org-gcal ()
  (use-package org-gcal
    :ensure t
    :after (org calfw calfw-org)
    :hook ((cfw:calendar-mode . org-gcal-sync))
    :config
    (setq org-gcal-file-alist `(("egpavelka@gmail.com" . ,user-gcal-file)))
    ;; Secret file
    ;; (setq org-gcal-client-id "<>"
    ;;       org-gcal-client-secret "<>")
    (load-file (concat user-secrets-dir "gcal.el"))))

(defun gigi/init-org-gh ()
  (use-package org-gh
    :after org))

(defun gigi/init-org-journal ()
  (use-package org-journal
    :config
    (setq org-journal-dir user-journal-dir
          org-journal-enable-encryption t)))

(defun gigi/init-org-make ()
  (use-package org-make
    :after org))

(defun gigi/init-org-noter ()
  (use-package org-noter
    :after org))

(defun gigi/init-org-pretty-table ()
  (use-package org-pretty-table
    :demand t
    :init
    (add-hook 'org-mode-hook (lambda () (org-pretty-table-mode 1)))))

(defun gigi/init-pretty-mode ()
  (use-package pretty-mode
    :config
    (global-pretty-mode t)
    (global-prettify-symbols-mode 1)))

(defun gigi/init-rogue-ligatures ()
  (use-package rogue-ligatures
    :after rogue-utils
    :config
    (rogue-ligatures-setup-general)
    (rogue-ligatures-setup-python)
    (rogue-ligatures-setup-ess)))

(defun gigi/init-rogue-org ()
  (use-package rogue-org
    :after org
    :config
    (rogue-org-setup-general)
    (rogue-org-setup-notes)
    (rogue-org-setup-babel)
    (rogue-org-setup-tex)))

(defun gigi/init-rogue-ui ()
  (use-package rogue-ui
    :after rogue-utils
    :config
    (rogue-ui-setup)))

(defun gigi/init-rogue-utils ()
  (use-package rogue-utils))

(defun gigi/init-writeroom-mode ()
  (use-package writeroom-mode
    :config
    (setq writeroom-restore-window-config t)))
